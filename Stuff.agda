open import Cat.Prelude
open import 1Lab.Reflection
open import Data.List

open import Data.Sum hiding ([_,_])
open import Cat.Monoidal.Base

module Stuff where

private
  variable
    ‚Ñì ‚Ñì‚Ä≤ : Level
    a b : Type ‚Ñì

sep : ErrorPart
sep = strErr "\t‚à•\t"

{-# TERMINATING #-}
show-pattern : Arg Pattern ‚Üí List ErrorPart
show-pattern (arg _ (con c ps)) = sep ‚à∑ strErr (primStringAppend "ùí∏" (primShowQName c)) ‚à∑ concat (map show-pattern ps)
show-pattern (arg _ (dot t)) = [ sep , strErr "¬∑", termErr t , sep ]
show-pattern (arg _ (var x)) = [ sep , strErr "ùìã", strErr (primShowNat x), sep ]
show-pattern (arg _ (lit l)) = [ sep , strErr "lit", sep ]
show-pattern (arg _ (proj f)) = [ sep , strErr "œÄ", strErr (primShowQName f), sep ]
show-pattern (arg _ (Pattern.absurd x)) = [ sep , strErr "absurd", sep ]

ùíû = Sets lzero
open Precategory ùíû renaming (Hom to _‚áí_)

Maybe-to-TC : List ErrorPart ‚Üí Maybe a ‚Üí TC a
Maybe-to-TC errs nothing = typeError errs
Maybe-to-TC _ (just x) = pure x

lookup-dict : List (Name √ó Name) ‚Üí Name ‚Üí Maybe Name
lookup-dict [] _ = nothing
lookup-dict ((k , v) ‚à∑ xs) key with (primQNameEquality k key)
...                                | true = just v
...                                | false = lookup-dict xs key

insert-dict : Name ‚Üí Name ‚Üí List (Name √ó Name) ‚Üí List (Name √ó Name)
insert-dict k v dict = (k , v) ‚à∑ dict

get-name : List (Name √ó Name) ‚Üí Name ‚Üí TC (List (Name √ó Name) √ó Name)
get-name mappings n =
  catchTC get-existing-name create-name
  where
    get-existing-name = do
      n‚Ä≤ ‚Üê Maybe-to-TC [] (lookup-dict mappings n)
      pure (mappings , n‚Ä≤)
    create-name = do
      let new-name-str = primStringAppend "Cat." (primShowQName n)

      n‚Ä≤ ‚Üê freshName new-name-str

      let new-mappings = insert-dict n n‚Ä≤ mappings
      pure (new-mappings , n‚Ä≤)

mk-def : List (Name √ó Name) ‚Üí Name ‚Üí TC (List (Name √ó Name))
mk-def mappings n = do
  new-mappings , n‚Ä≤ ‚Üê get-name mappings n
  catchTC
    (getDefinition n‚Ä≤ >> pure tt)
    (do
      function cs ‚Üê getDefinition n
        where _ ‚Üí typeError [ nameErr n , nameErr n‚Ä≤ ]
      ty ‚Üê inferType (def n [])
      declareDef (argN n‚Ä≤) ty
      defineFun n‚Ä≤ cs
    )
  pure new-mappings

mk-defs : List (Name √ó Name) ‚Üí List Name ‚Üí TC ‚ä§
mk-defs mappings [] = pure tt
mk-defs mappings (n ‚à∑ ns) = do
  new-mappings ‚Üê mk-def mappings n
  mk-defs new-mappings ns

catify : List (Name √ó Name) ‚Üí TC ‚ä§
catify mappings = do
  let ns = map snd mappings
  mk-defs mappings ns
  pure tt

module Input where
  hello : ‚ä§
  hello = tt

module Output where
  unquoteDecl = catify []
  -- FIXME: this fails because of ‚Äòunsolved metavariables‚Äô
  -- unquoteDecl hello = catify [ quote Input.hello , hello ]
